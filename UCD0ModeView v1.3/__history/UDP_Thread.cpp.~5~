//---------------------------------------------------------------------------


#pragma hdrstop

#include "UDP_Thread.h"
//---------------------------------------------------------------------------

#pragma package(smart_init)
__fastcall hUDP_Thread::hUDP_Thread(bool CreateSuspended)
: TThread(CreateSuspended)
{
}
//---------------------------------------------------------------------------
void __fastcall hUDP_Thread::Execute(void)
{
	fd_set rfd;
	timeval timeout;
	int nRet;
	char message[200];
	WSAData wsaData;
	WSAStartup(MAKEWORD(2, 2), &wsaData);


	char broadcast = 'a';
	int sUDP_Connect_sd=-1;
	struct sockaddr_in udp_broadcast_to;
	struct sockaddr_in udp_broadcast_fr;
	int client_addr_len = sizeof(struct sockaddr_in);
	//建立 socket
	sUDP_Connect_sd=socket(AF_INET,SOCK_DGRAM,0);
	if(sUDP_Connect_sd<0)
	{
		//DEBUG("UDP Broadcast Failed!");
		exit(0);
	}
	//socket發送的數據具有廣播特性
	if (setsockopt(sUDP_Connect_sd, SOL_SOCKET, SO_BROADCAST, &broadcast,sizeof(broadcast)) == -1)
	{
		//DEBUG("setsockopt(SO_BROADCAST)");
		exit(1);
	}

	SOCKADDR_IN addr;
	// 清空,將資料設為 0
	memset((UINT8*)&udp_broadcast_to,0,sizeof(struct sockaddr_in));
	memset((UINT8*)&udp_broadcast_fr,0,sizeof(struct sockaddr_in));

	//設定目標位址資訊
	udp_broadcast_to.sin_family = AF_INET;
	udp_broadcast_to.sin_port = ntohs(9090);
	udp_broadcast_to.sin_addr.s_addr =inet_addr("255.255.255.255");

	//設定己方位址資訊
	udp_broadcast_fr.sin_family = AF_INET;
	//udp_broadcast_fr.sin_addr.s_addr =inet_addr(COM->LAN_IP.c_str());
	//udp_broadcast_fr.sin_addr.s_addr =inet_addr("192.168.15.65");

	//綁定IP
	//bind(sUDP_Connect_sd, (struct sockaddr *) &udp_broadcast_fr, sizeof(struct sockaddr));

	//傳送封包
	/*char buf[512];
	sprintf(buf,"<ACTIONSTAR FIND ME>");
	sendto(sUDP_Connect_sd,buf,strlen(buf)+1, 0,
		(struct sockaddr*) & udp_broadcast_to,sizeof(struct sockaddr));
	*/
	//
	while(1)
	{
		int nRecEcho = recvfrom(sUDP_Connect_sd, message, sizeof(message), 0, (sockaddr*)&udp_broadcast_to, &client_addr_len);
		if (nRecEcho == INVALID_SOCKET)
		{
			//MessageBoxA(NULL,"<UDP>recvfrom ERROR","ERROR",MB_ICONHAND );
		}
		else
			printf("Received a datagram: %s", message);
	}
	//

	/*
	//設定timeout
	timeout.tv_sec = 3;
	timeout.tv_usec = 0;
	//非阻塞(select)
	FD_ZERO(&rfd);
	FD_SET(sUDP_Connect_sd, &rfd);

	nRet = select(0, &rfd, NULL, NULL, &timeout);
	if (nRet == SOCKET_ERROR)
	{
		MessageBoxA(NULL,"<UDP>SOCKET_ERROR!!","ERROR",MB_ICONHAND );
	}
	else if (nRet == 0)  //timeout處理
	{
		MessageBoxA(NULL,"<UDP>No response from Server","ERROR",MB_ICONHAND );
	}
	else //接收server端訊息處理
	{
		if (FD_ISSET(sUDP_Connect_sd, &rfd))
		{
			ZeroMemory(message, 200);
			int nRecEcho = recvfrom(sUDP_Connect_sd, message, sizeof(message), 0, (sockaddr*)&udp_broadcast_to, &client_addr_len);
			if (nRecEcho == INVALID_SOCKET)
			{
				MessageBoxA(NULL,"<UDP>recvfrom ERROR","ERROR",MB_ICONHAND );
			}
		  char *str_tmp;
		  char *save_temp[5];
		  str_tmp=strtok(message,"\r\n");
		  if(strstr(message,"<ACTIONSTAR DEVICE INFO>"))
		  {
			str_tmp=strtok(NULL,"\r\n");
			char *str="<TCP PORT>";
			char *p,*p1,*s;
			s="";

			p = str_tmp;
			p1=strstr(p,str);
			p=p1+strlen(str);
			*p1=0;
			strcpy(s,p);
			p=p1+10;
			//frmMain->IP_Edit->Text=inet_ntoa(udp_broadcast_to.sin_addr);
			//frmMain->PORT_Edit->Text=(AnsiString)p;
			}
		}
	}
	*/
	closesocket(sUDP_Connect_sd);
	WSACleanup();
}
//---------------------------------------------------------------------------
